name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 10 * * *' # run at 10 AM UTC

jobs:
  changelog:
    name: CHANGELOG
    runs-on: ubuntu-latest
    # Only run this on pull requests.
    if: github.event_name == 'pull_request'

    steps:
    # Note that checkout@v2 will not work with the git command below!
    - uses: actions/checkout@v1

    - name: Debugging info
      run: |
        git remote -v

    - name: Check that CHANGELOG has been updated
      run: |
        # If this step fails, this means you haven't updated the CHANGELOG.md
        # file with notes on your contribution.
        git diff --name-only $(git merge-base origin/master HEAD) | grep '^CHANGELOG.md$' && echo "Thanks for helping keep our CHANGELOG up-to-date!"

  test:
    name: Check Lib
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Fix ~/.cargo directory permissions
      run: |
        # Need to chown ~/.cargo or else the "Cache cargo registry" step will fail.
        # See https://github.com/actions/cache/issues/133.
        sudo chown -R $(whoami):$(id -ng) ~/.cargo/

    - name: Set build variables
      run: |
        # We use these variables as part of the cache keys.
        echo "::set-env name=RUST_VERSION::$(rustc --version)"
        echo "::set-env name=CARGO_VERSION::$(cargo --version)"

    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: cargo registry ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ env.CARGO_VERSION }} ${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          cargo registry ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ env.CARGO_VERSION }}

    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: cargo build ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ env.CARGO_VERSION }} ${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          cargo build ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ env.CARGO_VERSION }}

    - name: Lint with rustfmt
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

    - name: Lint with clippy
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --workspace --all-targets --all-features -- -D warnings

    - name: Run unit tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --workspace --lib

    - name: Run doc tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --workspace --doc

    - name: Run task codegen tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --test codegen task_codegen

    - name: Compile app codegen tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-run --test codegen app_codegen

  broker_amqp_test:
    name: Check Broker (AMQP)
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
        env:
          RABBITMQ_DEFAULT_VHOST: my_vhost
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Fix ~/.cargo directory permissions
      run: |
        # Need to chown ~/.cargo or else the "Cache cargo registry" step will fail.
        # See https://github.com/actions/cache/issues/133.
        sudo chown -R $(whoami):$(id -ng) ~/.cargo/

    - name: Set build variables
      run: |
        echo "::set-env name=RUST_VERSION::$(rustc --version)"
        echo "::set-env name=CARGO_VERSION::$(cargo --version)"

    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: cargo registry ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ env.CARGO_VERSION }} ${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          cargo registry ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ env.CARGO_VERSION }}

    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: cargo build ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ env.CARGO_VERSION }} ${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          cargo build ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ env.CARGO_VERSION }}

    - name: Run broker integration tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --test integrations brokers::amqp
      env:
        AMQP_ADDR: amqp://127.0.0.1:5672/my_vhost
        RUST_LOG: info

  test_python_example:
    name: Check Python Example
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip # This path is specific to Ubuntu
        key: pip ${{ runner.os }} ${{ env.pythonLocation }} ${{ hashFiles('requirements.txt') }} ${{ hashFiles('dev-requirements.txt') }}
        restore-keys: |
          pip ${{ runner.os }} ${{ env.pythonLocation }}

    - name: Install requirements
      run: |
        pip install -r requirements.txt -r dev-requirements.txt

    - name: Check formatting
      if: always()
      run: |
        black --check examples/

    - name: Lint
      if: always()
      run: |
        flake8 examples/

    - name: Typecheck
      if: always()
      run: |
        mypy --ignore-missing-imports examples/
