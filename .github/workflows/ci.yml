name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 10 * * *' # run at 10 AM UTC
  release:
    types: [published]

jobs:
  changelog:
    name: CHANGELOG
    runs-on: ubuntu-latest
    # Only run this on pull requests.
    if: github.event_name == 'pull_request'

    steps:
    # Note that checkout@v2 will not work with the git command below!
    - uses: actions/checkout@v1

    - name: Debugging info
      run: |
        git remote -v

    - name: Check that CHANGELOG has been updated
      run: |
        # If this step fails, this means you haven't updated the CHANGELOG.md
        # file with notes on your contribution.
        git diff --name-only $(git merge-base origin/master HEAD) | grep '^CHANGELOG.md$' && echo "Thanks for helping keep our CHANGELOG up-to-date!"

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
        override: true

    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy
        override: true

    - name: Set build variables
      shell: bash
      run: |
        # We use these variables as part of the cache keys.
        echo "RUST_VERSION=$(rustc --version)" >> $GITHUB_ENV
        echo "WEEK_NUMBER=$(date +%U)" >> $GITHUB_ENV

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: cargo registry ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Cache cargo build
      uses: actions/cache@v2
      with:
        path: target
        key: cargo build ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Lint with clippy
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --workspace --all-targets --all-features -- -D warnings

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        features: [codegen, extra_content_types]
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Set build variables
      shell: bash
      run: |
        # We use these variables as part of the cache keys.
        echo "RUST_VERSION=$(rustc --version)" >> $GITHUB_ENV
        echo "WEEK_NUMBER=$(date +%U)" >> $GITHUB_ENV

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: cargo registry ${{ github.job }} ${{ matrix.features }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Cache cargo build
      uses: actions/cache@v2
      with:
        path: target
        key: cargo build ${{ github.job }} ${{ matrix.features }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Build
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --workspace --no-default-features --features ${{ matrix.features }}

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Set build variables
      shell: bash
      run: |
        # We use these variables as part of the cache keys.
        echo "RUST_VERSION=$(rustc --version)" >> $GITHUB_ENV
        echo "WEEK_NUMBER=$(date +%U)" >> $GITHUB_ENV

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: cargo registry ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Cache cargo build
      uses: actions/cache@v2
      with:
        path: target
        key: cargo build ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Run unit tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --workspace --lib

    - name: Run doc tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --workspace --doc

    - name: Run task codegen tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --test codegen task_codegen

    - name: Compile app codegen tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-run --test codegen app_codegen

    - name: Compile beat codegen tests
      if: always()
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-run --test codegen beat_codegen

  docs:
    name: Build Docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install rust nightly  # we build docs on nightly because that's what docs.rs does.
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true

    - name: Set build variables
      run: |
        # We use these variables as part of the cache keys.
        echo "RUST_VERSION=$(rustc --version)" >> $GITHUB_ENV
        echo "WEEK_NUMBER=$(date +%U)" >> $GITHUB_ENV

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: cargo registry ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Cache cargo build
      uses: actions/cache@v2
      with:
        path: target
        key: cargo build ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Build docs
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --all-features --workspace --no-deps

  broker_amqp_test:
    name: Check Broker (AMQP)
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
        env:
          RABBITMQ_DEFAULT_VHOST: my_vhost
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Set build variables
      run: |
        echo "RUST_VERSION=$(rustc --version)" >> $GITHUB_ENV
        echo "WEEK_NUMBER=$(date +%U)" >> $GITHUB_ENV

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: cargo registry ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Cache cargo build
      uses: actions/cache@v2
      with:
        path: target
        key: cargo build ${{ github.job }} ${{ runner.os }} ${{ env.RUST_VERSION }} ${{ hashFiles('**/Cargo.toml') }} ${{ env.WEEK_NUMBER }}

    - name: Run broker integration tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --test integrations brokers::amqp
      env:
        AMQP_ADDR: amqp://127.0.0.1:5672/my_vhost
        RUST_LOG: info

  test_python_example:
    name: Check Python Example
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip # This path is specific to Ubuntu
        key: pip ${{ runner.os }} ${{ env.pythonLocation }} ${{ hashFiles('requirements.txt') }} ${{ hashFiles('dev-requirements.txt') }}

    - name: Install requirements
      run: |
        pip install -r requirements.txt -r dev-requirements.txt

    - name: Check formatting
      if: always()
      run: |
        black --check examples/

    - name: Lint
      if: always()
      run: |
        flake8 examples/

    - name: Typecheck
      if: always()
      run: |
        mypy --ignore-missing-imports examples/

  publish:
    name: Publish
    needs: [format, lint, build, test, docs, broker_amqp_test]
    runs-on: ubuntu-latest
    # Only run on main repo releases .
    if: github.repository == 'rusty-celery/rusty-celery' && github.event_name == 'release'
    steps:
    - uses: actions/checkout@v2

    - name: Install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Log in to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_TOKEN }}

    - name: Publish celery-codegen
      run: |
        cd celery-codegen
        cargo publish

    - name: Publish celery
      run: |
        # Wait a minute to publish the main crate since it depends on the
        # new versions of the other workspace crates.
        sleep 60
        cargo publish
